title: |-
  This module provides an easy to use, higher-level layer for working with [Stackdriver Logging](https://cloud.google.com/logging/docs),
  compatible with [Bunyan](https://www.npmjs.com/package/bunyan). Simply attach this as a transport to your existing Bunyan loggers.
body: |-
  ### Using as an express middleware

  ***NOTE: this feature is experimental. The API may change in a backwards
  incompatible way until this is deemed stable. Please provide us feedback so
  that we can better refine this express integration.***

  We provide a middleware that can be used in an express application. Apart from
  being easy to use, this enables some more powerful features of Stackdriver
  Logging: request bundling. Any application logs emitted on behalf of a specific
  request will be shown nested inside the request log as you see in this
  screenshot:

  ![Request Bundling Example](https://raw.githubusercontent.com/googleapis/nodejs-logging-bunyan/master/doc/images/request-bundling.png)

  The middleware adds a `bunyan`-style log function to the `request` object. You
  can use this wherever you have access to the `request` object (`req` in the
  sample below). All log entries that are made on behalf of a specific request are
  shown bundled together in the Stackdriver Logging UI.

  ```javascript
  const lb = require('@google-cloud/logging-bunyan');

  // Import express module and create an http server.
  const express = require('express');

  async function startServer() {
    const {logger, mw} = await lb.express.middleware();
    const app = express();

    // Install the logging middleware. This ensures that a Bunyan-style `log`
    // function is available on the `request` object. Attach this as one of the
    // earliest middleware to make sure that log function is available in all the
    // subsequent middleware and routes.
    app.use(mw);

    // Setup an http route and a route handler.
    app.get('/', (req, res) => {
      // `req.log` can be used as a bunyan style log method. All logs generated
      // using `req.log` use the current request context. That is, all logs
      // corresponding to a specific request will be bundled in the Stackdriver
      // UI.
      req.log.info('this is an info log message');
      res.send('hello world');
    });

    // `logger` can be used as a global logger, one not correlated to any specific
    // request.
    logger.info({port: 8080}, 'bonjour');

    // Start listening on the http server.
    app.listen(8080, () => {
      console.log('http server listening on port 8080');
    });
  }

  startServer();
  ```

  ### Error Reporting

  Any `Error` objects you log at severity `error` or higher can automatically be picked up by [Stackdriver Error Reporting][error-reporting] if you have specified a `serviceContext.service` when instatiating a `LoggingBunyan` instance:

  ```javascript
  const loggingBunyan = new LoggingBunyan({
    serviceContext: {
      service: 'my-service', // required to report logged errors
                             // to the Google Cloud Error Reporting
                             // console
      version: 'my-version'
    }
  });
  ```

  It is an error to specify a `serviceContext` but not specify `serviceContext.service`.

  Make sure to add logs to your [uncaught exception][uncaught] and [unhandled rejection][unhandled] handlers if you want to see those errors too.

  You may also want to see the [@google-cloud/error-reporting][@google-cloud/error-reporting] module which provides direct access to the Error Reporting API.

  ### LogEntry Labels

  If the bunyan log record contains a label property where all the values are strings, we automatically promote that
  property to be the [`LogEntry.labels`](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry) value rather
  than being one of the properties in the `payload` fields. This makes it easier to filter the logs in the UI using the labels.

  ```javascript
  logger.info({labels: {someKey: 'some value'}}, 'test log message');
  ```

  All the label values must be strings for this automatic promotion to work. Otherwise the labels are left in the payload.

  ### Formatting Request Logs

  To format your request logs you can provide a `httpRequest` property on the bunyan metadata you provide along with the log message. We will treat this as the [`HttpRequest`][http-request-message] message and Stackdriver logging will show this as a request log. Example:

  ![Request Log Example](https://raw.githubusercontent.com/googleapis/nodejs-logging-bunyan/master/doc/images/request-log.png)

  ```js
  logger.info({
    httpRequest: {
      status: res.statusCode,
      requestUrl: req.url,
      requestMethod: req.method,
      remoteIp: req.connection.remoteAddress,
      // etc.
    }
  }, req.path);
  ```

  The `httpRequest` proprety must be a properly formatted [`HttpRequest`][http-request-message] message. (Note: the linked protobuf documentation shows `snake_case` property names, but in JavaScript one needs to provide property names in `camelCase`.)

  ### Correlating Logs with Traces

  If you use [@google-cloud/trace-agent][trace-agent] module, then this module will set the Stackdriver Logging [LogEntry][LogEntry] `trace` property based on the current trace context when available. That correlation allows you to [view log entries][trace-viewing-log-entries] inline with trace spans in the Stackdriver Trace Viewer. Example:

  ![Logs in Trace Example](https://raw.githubusercontent.com/googleapis/nodejs-logging-bunyan/master/doc/images/bunyan-logs-in-trace.png)

  If you wish to set the Stackdriver LogEntry `trace` property with a custom value, then write a Bunyan log entry property for `'logging.googleapis.com/trace'`, which is exported by this module as `LOGGING_TRACE_KEY`. For example:

  ```js
  const bunyan = require('bunyan');
  // Node 6+
  const {LoggingBunyan, LOGGING_TRACE_KEY} = require('@google-cloud/logging-bunyan');
  const loggingBunyan = LoggingBunyan();

  ...

  logger.info({
    [LOGGING_TRACE_KEY]: 'custom-trace-value'
  }, 'Bunyan log entry with custom trace field');
  ```
